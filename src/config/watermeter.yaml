---
<<: !include common/base.yaml

substitutions:
  device_name: watermeter
  device_comment: "This sensor detects every liter of used water"

esphome:
  name: ${device_name}
  comment: ${device_comment}

esp32:
  board: esp32dev
  framework:
    type: arduino

button:
  - <<: !include common/button/restart.yaml

text_sensor:
  - <<: !include common/text_sensor/version.yaml
  - <<: !include common/text_sensor/wifi_info.yaml

globals:
  - id: initial_water_usage
    type: float
    restore_value: yes
    initial_value: "0"
  - id: total_water_pulses
    type: int
    restore_value: yes

api:
  encryption:
    key: !secret api_encryption_key
  reboot_timeout: ${reboot_timeout}
  services:
    - service: meter_value_water
      variables:
        meter_value: float
      then:
        - globals.set:
            id: initial_water_usage
            value: !lambda "return ( meter_value ) ;"

binary_sensor:
  - <<: !include common/binary_sensor/status.yaml
  - platform: gpio
    id: internal_pulse_counter
    name: ${device_name}_pulse_counter
    pin:
      number: GPIO23
      mode:
        input: true
        pullup: true
    on_press:
      - then:
          lambda: id(total_water_pulses) += 1;

sensor:
  - <<: !include common/sensor/uptime.yaml
  - <<: !include common/sensor/wifi_signal.yaml
  - platform: pulse_counter
    pin: GPIO23
    id: ${device_name}_pulse
    name: "${device_name}_pulse"
    update_interval: 10s
    state_class: measurement
    unit_of_measurement: "l/min"
    accuracy_decimals: 1
    icon: "mdi:water-pump"
    total:
      id: sensor_pulse_meter_total
      name: "${device_name}_total_since_start"
      unit_of_measurement: "mÂ³"
      state_class: total_increasing
      device_class: water
      accuracy_decimals: 3
      filters:
        - multiply: 0.001
  - platform: template
    id: ${device_name}_total
    name: "${device_name}_value"
    state_class: "total_increasing"
    icon: mdi:water
    unit_of_measurement: m3
    accuracy_decimals: 3
    lambda: return id(initial_water_usage) + (id(total_water_pulses) * 0.001);
  - platform: template
    id: ${device_name}_pulses
    name: "${device_name}_pulse_total"
    state_class: "total_increasing"
    lambda: return id(total_water_pulses);
